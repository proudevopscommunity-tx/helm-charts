---
# Source: weather/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-configmap
data:
  MYSQL_DATABASE: weatherapp
  MYSQL_USER: admin
  DB_HOST: db #ok
  DB_PORT: "3306" # added
  REDIS_USER: redis #ok
  AUTH_HOST: auth #ok
  AUTH_PORT: "8080" #ok
  WEATHER_PORT: "5000" #ok
  WEATHER_HOST: weather #ok
  REDIS_HOST: redis #ok
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: alpha-db-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete # Can also be 'Retain' if you want to keep the data after deletion
  storageClassName: manual
  hostPath:
    path: /var/lib/mysql # Change this to the actual path you want to use on your local machine
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alpha-db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 1Gi
---
# Source: weather/templates/auth.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-auth
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    # alb.ingress.kubernetes.io/healthcheck-path: /index.html
spec:
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-auth
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-db
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP
---
# Source: weather/templates/redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-redis
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Source: weather/templates/ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-ui
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-ui
---
# Source: weather/templates/weather.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-weather
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-weather
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP
---
# Source: weather/templates/auth.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-auth
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-auth
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-auth
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm 

    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "Checking for the availability of Weather Server deployment"; while ! nc -z weather 5000; do sleep 1; printf "-"; done; echo -e "  >> Weather Server has started";']
      containers:
        - name: weather-auth
          securityContext:
            {}
          image: "proudevops/auth:latest"
          imagePullPolicy: Always
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap  
                  key: DB_HOST
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets     
                  key: DB_PASSWORD
            # ports:
            # - containerPort: 8080
---
# Source: weather/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-redis
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-redis
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-redis
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: weather-redis
          securityContext:
            {}
          image: "proudevops/redis:latest"
          imagePullPolicy: Always
          env:
            - name: REDIS_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: REDIS_USER
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: REDIS_PASSWORD
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          hostPath:
            path: /data/redis-data
---
# Source: weather/templates/ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-ui
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-ui
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-ui
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm

    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: weather-ui
          securityContext:
            {}
          image: "proudevops/ui-weather:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: AUTH_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: AUTH_HOST
            - name: AUTH_PORT
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: AUTH_PORT
            - name: WEATHER_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: WEATHER_HOST
            - name: WEATHER_PORT
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: WEATHER_PORT
            - name: REDIS_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: REDIS_USER
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets 
                  key: REDIS_PASSWORD
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: REDIS_HOST


          livenessProbe:
            null
          readinessProbe:
            null
          resources:
            {}
---
# Source: weather/templates/weather.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-weather
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-weather
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-weather
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z db 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']
      containers:
        - name: weather-weather
          securityContext:
            {}
          image: "proudevops/weather:latest"
          imagePullPolicy: Always
          env:
            - name: APIKEY
              valueFrom:
                secretKeyRef:
                  name: app-secrets    
                  key: APIKEY
          ports:
            - containerPort: 5000
---
# Source: weather/templates/db.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: weather-ss-db
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-db
  serviceName: weather-ss-db
  replicas: 1
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-db
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: weather-db
          image: "proudevops/db:latest"
          imagePullPolicy: Always
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: MYSQL_USER
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/mysql
            - name: dbcreation-script
              mountPath: /docker-entrypoint-initdb.d #https://hub.docker.com/_/mysql Refer Initializing a fresh instance 
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: alpha-db-pvc
        - name: dbcreation-script
          configMap:
            name: app-configmap
---
# Source: weather/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: weather-ss-ui
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
    alb.ingress.kubernetes.io/load_balancer_name: external-dns-ingress
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/success-codes: "200"
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    external-dns.alpha.kubernetes.io/hostname: default.tclovis.com,ui.tclovis.com
spec:
  ingressClassName: my-aws-ingress-class
  rules:
    - host: ui.tclovis.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: weather-ss-ui
                port:
                  number: 3000
---
# Source: weather/templates/sealedsecrets.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: "true"
  creationTimestamp: null
  name: app-secrets
spec:
  encryptedData:
    APIKEY: AgBCMae2MzUg/0J1OZlythgNvX1mbs2MplNrzGsbtBTNiP4yBm4HJWXfouMtKRSCmyHMX9dOkKEl3cVwBLmKfK9+qVs7GKzq9871W+LU85x0hTYwMvto7L1SdQm8yrdaVLL6SqlHRZdDhHnDKes5CnvjKpAW793NsNllUfQ73ISidnYbbDMdyeWVje2LgkX9vqxYYt1mhLPczbHCJ6+NtoFv2wAnNS6nmy51IRG7L1TSv+qN65E2FOQMDuNveBxT3Z0qKsN1Y9Ibe9gWlVsuStpBSGtmK6B7UTHLVxonlPwbq+Mzv7iHkXVSiuT5mdFLTVGJv+ouvBSdx8Ga21FcQN2o3azdTdRLagHcJuRKFSxbJfNxEw64DS2A0X5ltsSQpVqHmcpkALJ/HPNGQ61M1Se8AxkwDEuzGjJP5v+yaHNT0TAr7Mt8msH0pr45IKhi9AvjG7SmF0jMIulH31kiAm/QFwVPJkQsDfLgXwP1x3hDiYmxOffT++Lv8KcBtpxVJAYylvxcSipE/fKF3/d05RClInexsEBKQGejtWTXBXjrmFsCHa1diHrTLksInQyk7vlKMgX6E76wwNXK0VRqZJE+lYa3Or5SONyX/cesp8EBNxHb2qfsJXHrchp7zPgHTbFZGVT3kE/oyXLIL2JJGH5f7EqvMWsyD79jGVSqF6QtgxV0y08sXCG+dT0ADcciJkFMeoErYVi+7oG98opX59GS3ICnSitlYHmlgDzntjD3y7oGeAGUn1B5KMxru9SFK9s7PA==
    DB_PASSWORD: AgBCz084s6avDDN8vtKwj/SzPc7J67V2BJ+2ZJv5YKkONiIM6+4D/7cROSrMz/hRelX0WpUzm9FwjK0oRHBBAX5JQ5W/pxABAR6Y10xuaPghmcFrXU73CG/2O96C1WGAktuR0j6OS/pUqy1mYPu6DetMM7wpODCGalf0UQkSl168kfuRnGri24NM6XP1cXClOy24rvqdH41cmOoOjigVcW/fJN6coTIi3kS31LzpMPPsVyhO90/DyIjDJy3sfC+w/hLXzWdG1xbgbmPzbY0DYKWa/u5BUON5WCBHPkRnKkXUPsd6pVfXVlGlpqwH3LrltC+sg6HkVgrTJzD1UD9JSFSd/X60oRKDZtDku46WsO0kR0fhGPo/kmXhsUZtuWs/oMAyZcTzDJH16XWZYU8nz4SjBqizAwqaWz6LwAeiHdhqdUKFaAuFayxXydi8YAdF0MT++a3Go2Reqdg/eXygRYof2sN2MrsLS5EWydAdE2wtmaSgU6aNfssdkO0mlP+fpRJ6KCsREdAmOLQN8IL7Efba2EYtYFSZFefDPjwAsa/rBAQMspp6pvjzjMdxfwBrnLI2L9YPAaYJ2gSH/UqOcfIkqMHqNc1qQrxBi8Ak8JxHp1mgVmxLdpyxRhWiPf5mnT1jQPha5R9XkWAW6/J1I/Mv0XTfB4RJohBpTebw5QPMt0E294X7GSecW4MVyLYoLdG4Oa28cHuSSApiBiI=
    MYSQL_PASSWORD: AgADLIb6sGEtnheqA+BriUGuiUB9onV5WCIfpdMdNRSSdtv+qvFHxeBA5uc7vO6iq9OzNeJ632/XKevcfzZ8b/y/anMIbQ/N9cIEl2f2c4xoJXIml+xaLvEeGHWA7iwTbHYj9rBITuTZW8O0Dbczc0cIGgiMi0UL0Yg6aSVcpExqffPAWRQC6jXTVENpzrHrzDV58wke23tcisJpChi2ePar1X0mLKB3FcWynoor6lU8fo3KjnkCx2caN4TVCHkDXwfn0H8S2JP+rD9DgthbFLmCV/LE6l9OQCrrAt+PvZPhTe7FO2Z9r4OhRaZmcRW3+raLJb3yCXCQt8G/LjRoXej8rsVjMShc4u9tm2zWTQiXbrLf9J6Ismf4K/NnLkhVJ3dpeMxl7JRp5FS7fSlLjww1GL85X7+7D8m5uLxr1+KZ6VkEaFhSV8pXQbhdeLWCv6Q9f43hHzC28E7VUgxxBMPFeknuCW7kLgy5V0yl/mO6wYnWXjdkfCJjt/W89HTOwbCEq0ZTIGUAPIQigrRM+hl/3x+LWVLgP5Qw6Xe5QlwmPDH7W739hf+qJNf3gfWlQXUma8b4m3+u+8ZT3agJ3ZjSrYWgPGl5+7I7UtEPbNsgpfHNx6Q/5Ud0MJz1VDa4GiiY/SOW2qVl1xrAvQDKN2MfAYNyyM/klOifmWFa9GQ40dykGDR50viqOp/ScPTMJjMFoQ52CALJ60hjzb1xKywCvC1hEFM7+g==
    MYSQL_ROOT_PASSWORD: AgClY+lHVaY4s/Ts2GFz/lzLd5Yv38Kj9093M8CxhX2CmWcAXj+wgOteqKpRvP4yGdcEFSvPlb+myS8qvLE3NBhFHKrhvsZNss2l6nm+fAZCTocC8c527iiwFs0VCWlcZCYTpRli7kyD3otjvvixm5EfW38iZim5TVAA/YRZZFLVj5VpIeKz8VGSzbZx0G48OaapDMoeZV9UgRQr4DSN+okeW9fRQyRpqkxiuAfdF6ozH5tnpGPdSdepMSO5M5p6Vs6+WSrM89e0FPhPXoWameHYrubAYQ3h/eFVF4ybCk7Mhjz23M5OxH48zU6kIdYCFVWsQShdbMqbqhGXAwhaQkmawRdNAdWtkro+cRQ0Yo2mPApgzRo46q82Wga+Vz3pYHfNhavEuuNtOD1mZcHE9CyYMvVMPiYdasu/0G3BruMFhUjZom0tmT15dZketYXvxSzTNUoTtyHDKXRB/q9aycOnkN8Q3iTsltyxcUORzth50usmtumqXih5xL4MZZUryUxsO1Y9q7+s4i+DeIWI2fT02bTBVdFEtDCYXh/WqOPo0JeEUP9bk2NzL0Cu959Q2iKqvWFAn2OcJ6Xgi4p2zFa5SMdnF1NPH+/nNsKAwG0NvnlStT2e2wseS6cZ2gt0XGBSkG72npw2fXkEKZyiAxi+NbMEjxdtAz7dAbmweaYuCpvsgc78uT76BV/Dyd7sOJpJ6/u8179CPfxwCKQ=
    REDIS_PASSWORD: AgBzyZJXIPRJlChNsp7Bv8Ef5sEB4kTHb7R9Q7gJLydI+NshLycUiOLh+s3YT3MM7mGf+RU2VZrboA5wlsb9NoQ9p6ky72KzHZdyxofttOcAOPyGt1L/pj/jlFTLIlydjYpospNuryvveRGTeFK1Fla6FQcve3CTvrZP3Upy04o5Q2SR7yvpqzbVgpAkFotKACe830RXKHbkOuTtQhKqKSWiNj2G2qMj9SS1IOBPBmX2Nsq7xz8GTyjQvMlAmfrhl3jEtTt1jvv8cRfSqFbp5ERq/yOzqyPD3IPvfRz4z1z2/fNBAjp34arWVZ7KC3YW7VL/vV9WmOihFQLWo9k17B7GHsP6M1en7bapFMaW/94HpJim+T5M6gOBNcyAkFuT+aRHvSxr06pFL0XP2zVXmVRxp0dBh/d49rr8dTHB9//AQBqY2WEOADaQnPHgUQ+eoQLigT/iohmJGU9DCxC/c+f3t5NooWJEMidmorkW7U5FuT+j4E2ORIDZ2z7WJVqra5zEbM1JxJgOmaZ0h2PXIdkawDl6BSE2EDkgayDQX9Yfj5zkuWdx8rTrrmkpD/yPLRs+Vu5l7deee3/jo4RHVAfXBJxKSCeLzKxxRN5hU1dcY7RlS2Bpz8tSV9r3ZniHRhnTvuhgYhmCllgUxocb0YTZWiqYNtn917oP5q2vnCZeJu6M+3q8ZGcRky2fVH9FaBR3djCrqg==
  template:
    metadata:
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: "true"
      creationTimestamp: null
      name: app-secrets
    type: Opaque
