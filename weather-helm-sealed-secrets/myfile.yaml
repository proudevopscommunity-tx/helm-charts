---
# Source: weather/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-configmap
data:
  MYSQL_DATABASE: weatherapp
  MYSQL_USER: admin
  DB_HOST: db #ok
  DB_PORT: "3306" # added
  REDIS_USER: redis #ok
  AUTH_HOST: auth #ok
  AUTH_PORT: "8080" #ok
  WEATHER_PORT: "5000" #ok
  WEATHER_HOST: weather #ok
  REDIS_HOST: redis #ok
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: alpha-db-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete # Can also be 'Retain' if you want to keep the data after deletion
  storageClassName: manual
  hostPath:
    path: /var/lib/mysql # Change this to the actual path you want to use on your local machine
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alpha-db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 1Gi
---
# Source: weather/templates/auth.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-auth
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    # alb.ingress.kubernetes.io/healthcheck-path: /index.html
spec:
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-auth
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-db
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP
---
# Source: weather/templates/redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-redis
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Source: weather/templates/ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-ui
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-ui
---
# Source: weather/templates/weather.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-weather
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-weather
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP
---
# Source: weather/templates/auth.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-auth
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-auth
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-auth
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm 

    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          # command: ['sh', '-c', 'echo -e "Checking for the availability of Weather Server deployment"; while ! nc -z weather 5000; do sleep 1; printf "-"; done; echo -e "  >> Weather Server has started";']
      containers:
        - name: weather-auth
          securityContext:
            {}
          image: "proudevops/auth:latest"
          imagePullPolicy: Always
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap  
                  key: DB_HOST
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets     
                  key: DB_PASSWORD
            # ports:
            # - containerPort: 8080
---
# Source: weather/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-redis
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-redis
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-redis
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: weather-redis
          securityContext:
            {}
          image: "proudevops/redis:latest"
          imagePullPolicy: Always
          env:
            - name: REDIS_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: REDIS_USER
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: REDIS_PASSWORD
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          hostPath:
            path: /data/redis-data
---
# Source: weather/templates/ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-ui
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-ui
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-ui
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm

    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: weather-ui
          securityContext:
            {}
          image: "proudevops/ui-weather:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: AUTH_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: AUTH_HOST
            - name: AUTH_PORT
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: AUTH_PORT
            - name: WEATHER_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: WEATHER_HOST
            - name: WEATHER_PORT
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: WEATHER_PORT
            - name: REDIS_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: REDIS_USER
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets 
                  key: REDIS_PASSWORD
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap 
                  key: REDIS_HOST


          livenessProbe:
            null
          readinessProbe:
            null
          resources:
            {}
---
# Source: weather/templates/weather.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-weather
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-weather
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-weather
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          # command: ['sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z db 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']
      containers:
        - name: weather-weather
          securityContext:
            {}
          image: "proudevops/weather:latest"
          imagePullPolicy: Always
          env:
            - name: APIKEY
              valueFrom:
                secretKeyRef:
                  name: app-secrets    
                  key: APIKEY
          ports:
            - containerPort: 5000
---
# Source: weather/templates/db.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: weather-ss-db
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-db
  serviceName: weather-ss-db
  replicas: 1
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-db
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: weather-db
          image: "mysql:8.0.31"
          imagePullPolicy: Always
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: MYSQL_USER
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/mysql
            - name: dbcreation-script
              mountPath: /docker-entrypoint-initdb.d #https://hub.docker.com/_/mysql Refer Initializing a fresh instance 
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: alpha-db-pvc
        - name: dbcreation-script
          configMap:
            name: app-configmap
---
# Source: weather/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: weather-ss-ui
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
    alb.ingress.kubernetes.io/load_balancer_name: external-dns-ingress
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/success-codes: "200"
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    external-dns.alpha.kubernetes.io/hostname: default.tclovis.com,ui.tclovis.com
spec:
  ingressClassName: my-aws-ingress-class
  rules:
    - host: ui.tclovis.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: weather-ss-ui
                port:
                  number: 3000
---
# Source: weather/templates/sealedsecrets.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: "true"
  creationTimestamp: null
  name: app-secrets
spec:
  encryptedData:
    APIKEY: AgASwXbd3YyGqU7yS27kyGA0VC0KkIz9XTkRyo/3pNctKCnb3Aexgk9OZMks4DkjeymlZanUwA4kU0NUAocp6l0awGB86g+ELceAVEA6rqX+PTLj6fdBug2AZ0rAzRO12XGeAcN2EyVkjynQSa7O1/c5kOVoqRHdClDfR8nnM5NoDrOJFYn4vADvOuYhn7jhoIUXc1tUSMclZ+/8a4gAbMYH+LlIMTJmyE+pFVetRLbBzx9CAQvXGi4GPpKO1W4xV289WuntZa04ASc2+9R7nK1auHhdpnVqCcE2uduGJ+2qyAl2bKdRbFoiD2TILZhejNQZbRhBcdS/7IhK+V6eNIbFNa5nt9oopt4Rz/Ubvg2dYeMnl4H3fgbkxOJnLPVJNhhhmNsJao+ZcTRjgSleBPnGpS1EoU2OFNchZVpaaygcUWaPZHok1VKvCRj3o6uByLNr51J5gQDCtgwU3tI6vLm5N39I6Zeqfhqe4z6FPFNin/9Evv4QqnlXvMphuGw9BGQlnUy8WEaVytUyhOXdtFRnwf1q8arp4waKxUJLrzCFROpqgC6YocI0Mwd7JgYjv5ubRKMO0wiNz3dC26HJTSDY1XF/2aM5LHPtdXW+4UGPqZvPV9//vLg6cQJNXawca1HwnRVTxxLmK60vU0EtaA8CM/Zgx90S8cM1GMVickp4FOpNHAyy7+RkAjDTj9Yndew5pHCt6SAHo6U6yvAC7Bm2nMe8bH3dgVpTcR5rugNR2KXd/2f0Q71c6jav1Kv67l2MFQ==
    DB_PASSWORD: AgAwfieFYbEWEQNfkpD7Jy7u2wJ5q7icBeMjZFFBVijKTEQdsKnmTXso1+8Hmao0vSP4y1EkqutShDkB7/ynxb1Q75po5yzJxcZishNAilC8yoP3WwjyXXCuD8s3Q8RFzyk27lc/8e3w5/MCaTB9PDyW4RiyNe6xY+7VXSdR1Rg427i1AQEFPSe+duN2dEQWfxI8ZnUSBPiUrTDrC+D2m6t0V/32jUI4e7xWkYGUA4Xe6sZMlTTEPbny3FE+efczWLCHtB0J10PAX11cLETAhkkn4z0qkEKcinSIEqSnPxf9tEkrfvCw03mcH2ORktsDDmSGw9nQq2FcDp81Gjm9UBD10VPTWojtLJsX4giYUh1AibAj8gWoQdmRknR7CXHO77S0a5E6cbCgBashkGLEadXeEDFNvg6cPIqplTNso1hdmwlPZSOPyiGnbl3gf3QZtb+5fTqXROW5Ow1jGYaczukyHswXO20+ino9JTlxbvMH9WNtfowr4OIt8BQpaQYtfmavTm+GxP85B00xIGv8UGDLuUzT+CSoIfo0OIAOPgExnYaya4s2KJyNjNUZ+PKJ0BAfMlJojVDk+/TEmioxb48gR4cZndqz1ZpZyKgUWQq+PfajAaYegocLLePR5QcaCW388Ox/6rCVuam1IimXhhs7T+SBlQpQImo47pA6HHxGv1U76POm8wHUasuNLx1WGXdoWdeumQn7lTrcxzA=
    MYSQL_PASSWORD: AgDTWyI5BKW/fLS5fBh+OjEYC+CYSTC6HpxFcXZjSl+T2OLF2c00L1AGHmdcu5Vy9ls7q1yLPv//cbAgKS3mbMtXa090Oidmh8X1fBU59U0poLrcmJfpUnAdvC0E+/AlhvaC/g4WvCgL95N6okGnANrHXFyWryvlSeDKdCPl2NYHmMgwXPsYdTqf/8ZOE6+TC26WiooipcDDriKf58T3DBMeRoCiiO0SK7FXJfYy2ljjLU5sA2S+DI14iAU11QWu36twRJeFlFrDIgbD9WfdHLRSd1HYQ4wrI+k6XWp03ieUhbyyCGaogaaEYMD7BMAVpYymLg9isgyl80y8buZtIOTCNSwfKEaPie3Rkak/g/OIvevlBGg9lzfi2eEEJFahgv+m+3q1qxRoidKMOhshMkgBoGIyEpWJbyrjtOjhDOcSuOzeIFFCW3SM2USl6K1XlVjh4Sz1uv5Tl5/pHvXkhv3axYRDh1ixxWcbQwhnqCdr9oSMbEvXQvFXMV4gs8S1T9FyRJ/OaJhdGlHzYaCqsLJKX+yOj+b06cfedakBOXGteAc3m35hMPRKPDZRVvS87WvArZkDqlr2bi3ZVnkpJza8pkinvPUUAN0DT4uP7pZvDOAQFToPbPIkhAOC9WgccK2TSYe9dWxD9C3pkC3pPyBFtw5Xquh7YxUKLaMzkKJMDo3vMUVkyUj4A6+6WQVZwbOTcCvtjMrFC1aJ9/WyRkznBttGF+pIng==
    MYSQL_ROOT_PASSWORD: AgB5zd0jYtsziI2Vcbrv/IzRTF6uLaZ4MiEnyv1/If4MFGwUoLuNtFDtrZj2z0PEPSlnkoAYur80DKXmsZCZ5pwTouRHUqxlwvw+uLZdRlGVX3eK29zrIpw5R/lPqq9eZ+CB1GzsO7R60VfS3S9NuZQg5Vd0oxe8jYocUXhx0RQcmC5d8hHpgIfS0EXDE2K75w/utVscNp+d3GhaNlDUpgnlGziP8tkrtP4ZKgQ8izh0N8t4UNb9OveAGhrVM8dEWyLug21TwZsEowAYWBdPgsno5/fpZfrtQZXYbmbqYYzgRAjyrnbksVM3yWm4ufXQfJ1JaT+0oCMmA3qqSBCTMQzvtg5LHc0B+L/kz/oQooGmnq12TJ75p4OrikHkYlCcVD0ph/MUAxqXxBp9YHnqcVCc6rEwi43jSZllZh5HEby1LIDv70Ih99RMc3e2qncQJu/zY0QFylcitFHE6rSkWmKwwd+cKwFvOOcJ9GwJgQwXln348VoXm9DlR3ZVpeZb9UMrAe9ENIfCeHz2Lg13whJHdahclaiqoy7ar/sQSNhuCoXlzSLH5FzfyPbpEaK86DAycU8N3EwKdZg9cuHoxhZjCh98zEum6h1KgowGII3VQc9CkQvHARXZm9y6SaWS5Z98/9G/Wh0HD7t6xlPmItko27MXwuBy7t1ZfR9xvfsDYMiQHovCpohHoexoC4B8if/QVIFpIAhwjn3+oo0=
    REDIS_PASSWORD: AgB5VUO5EmxaDW/Ya9hYiPkpqsWGwvXGOL9IkK1nRs/lmrx95CVoizbLjoKIJRbcyvLRVMU15ZSXBPIXiSGsYz1lDg1lC8BkQXHazkcWrnaxaLfgWRTWzpPsgLQBQWJ9hOZDrkChB97pBcNm3NsQq8jSAOLMhOypFiGx6nN7MC8bLUWz+TcxaY8TULStC5eAa5Tt5F6HWKdvCPReG2k+Pg/gtjO5bbQdEHXEOFEahjTz2bSO5uaqDdIGUQVcw/gKJFFHwi+2dYFjtNEDN+aSlgqkEQxA8xoXTVMJnP4L0qfwCeE9XAxAqy20RwzrO6Jimx2kq8N8WFqzUo4qTHEmML2pmXOXjmbSJAA26W8ltkmSaje7+WSNAYmTkS3tJyZYQzQzx5uIw/JhM8Or5HdYULBmBpqMd7pEdTji/dxZ4h80puWL2OwxKyAlFEO5JujB7Re9RW8J5p6OKWyDzArYXfpUk6lNcUhJmgbGF4maaZ+moQ0KHsSv0Z5YsxehW78sCFDLrSXhcIktdAs9gYejYOSr//RTRCgfkwjMg6RrAx6pyN1gDiFXMQhMBEtCM+iv8VGMIo0IcEUq384b3GwV+pF8u7QvCOB8iHwZWFVpqKjWORXeVJ1s67MAjyw0SZJlH/2g+4Yr/xiFgLvbSCqz0dkq0L/dhnjt8g02Lre4Ga7/ine/rBwJs7Y3ywlC8jhqB+DqWHDM9g==
  template:
    metadata:
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: "true"
      creationTimestamp: null
      name: app-secrets
    type: Opaque
