apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "weather.fullname" . }}-weather
  labels:
    {{- include "weather.labels" . | nindent 4 }}
spec:
    {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "weather.selectorLabels" . | nindent 6 }}-weather
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "weather.labels" . | replace .Release.Name (printf "%s-weather" .Release.Name) | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z db 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']
      containers:
        - name: {{ .Chart.Name }}-weather
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository_weather }}:{{ .Values.image.tag_weather | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: {{ .Values.env.api_key }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.secret_name }}    
                  key: {{ .Values.env.api_key }}
          ports:
            - containerPort: {{ .Values.service.port_weather }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "weather.fullname" . }}-weather
  labels:
    {{- include "weather.labels" . | nindent 4 }}
spec:
  selector:
    {{- include "weather.selectorLabels" . | nindent 4 }}-weather
  ports:
    - protocol: TCP
      port: {{ .Values.service.port_weather }}
      targetPort: {{ .Values.service.port_weather }}
  type: ClusterIP
