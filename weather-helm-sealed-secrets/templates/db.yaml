apiVersion: v1
kind: PersistentVolume
metadata:
  name: alpha-db-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete # Can also be 'Retain' if you want to keep the data after deletion
  storageClassName: manual
  hostPath:
    path: /var/lib/mysql # Change this to the actual path you want to use on your local machine

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alpha-db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "weather.fullname" . }}-db
  labels:
    {{- include "weather.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
     {{- include "weather.selectorLabels" . | nindent 6 }}-db
  serviceName: {{ include "weather.fullname" . }}-db
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "weather.labels" . | replace .Release.Name (printf "%s-db" .Release.Name) | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "weather.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-db
          image: "{{ .Values.image.repository_db }}:{{ .Values.image.tag_db | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: MYSQL_USER
          ports:
            - containerPort: {{ .Values.service.port_db }}
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/mysql
            - name: dbcreation-script
              mountPath: /docker-entrypoint-initdb.d #https://hub.docker.com/_/mysql Refer Initializing a fresh instance 
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: alpha-db-pvc
        - name: dbcreation-script
          configMap:
            name: app-configmap


---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "weather.fullname" . }}-db
  labels:
    {{- include "weather.labels" . | nindent 4 }}
spec:
  selector:
    {{- include "weather.selectorLabels" . | nindent 4 }}-db
  ports:
    - protocol: TCP
      port: {{ .Values.service.port_db }}
      targetPort: {{ .Values.service.port_db }}
  type: {{ .Values.service.type }}

