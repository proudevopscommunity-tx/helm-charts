---
# Source: weather/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: weather-ss
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: weather/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-configmap
data:
  MYSQL_DATABASE: weatherapp
  MYSQL_USER: admin
  DB_HOST: db #ok
  DB_PORT: "3306" # added
  REDIS_USER: redis #ok
  AUTH_HOST: auth #ok
  AUTH_PORT: "8080" #ok
  WEATHER_PORT: "5000" #ok
  WEATHER_HOST: weather #ok
  REDIS_HOST: redis #ok
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: alpha-db-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete # Can also be 'Retain' if you want to keep the data after deletion
  storageClassName: manual
  hostPath:
    path: /var/lib/mysql # Change this to the actual path you want to use on your local machine
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alpha-db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 1Gi
---
# Source: weather/templates/auth.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth
  annotations:
    # alb.ingress.kubernetes.io/healthcheck-path: /index.html
spec:
  selector:
    app: alpha-auth
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# Source: weather/templates/db.yaml
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  selector:
    app: alpha-db
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP
---
# Source: weather/templates/redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: alpha-redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
# Source: weather/templates/ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-ss-ui
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss-ui
---
# Source: weather/templates/weather.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather
  annotations:
    # alb.ingress.kubernetes.io/healthcheck-path: /index.html
spec:
  selector:
    app: alpha-weather
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP
---
# Source: weather/templates/auth.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alpha-auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alpha-auth
  template:
    metadata:
      labels:
        app: alpha-auth
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "Checking for the availability of Weather Server deployment"; while ! nc -z weather 5000; do sleep 1; printf "-"; done; echo -e "  >> Weather Server has started";']
      containers:
        - name: alpha-auth
          image: proudevops/auth:latest  # leonardtia/auth:latest
          imagePullPolicy: Always  # Set the image pull policy to Always
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: app-configmap  
                  key: DB_HOST
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets     
                  key: DB_PASSWORD
            # ports:
            # - containerPort: 8080
---
# Source: weather/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alpha-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alpha-redis
  template:
    metadata:
      labels:
        app: alpha-redis
    spec:
      containers:
        - name: alpha-redis
          image: proudevops/redis:latest  # leonardtia/redis:latest
          imagePullPolicy: Always  # Set the image pull policy to Always
          env:
            - name: REDIS_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap  
                  key: REDIS_USER
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: REDIS_PASSWORD
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          hostPath:
            path: /data/redis-data
---
# Source: weather/templates/ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ss-ui
  labels:
    helm.sh/chart: weather-0.1.0
    app.kubernetes.io/name: weather
    app.kubernetes.io/instance: weather-ss
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather
      app.kubernetes.io/instance: weather-ss-ui
  template:
    metadata:
      labels:
        helm.sh/chart: weather-0.1.0
        app.kubernetes.io/name: weather
        app.kubernetes.io/instance: weather-ss-ui
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm

    spec:
      serviceAccountName: weather-ss
      securityContext:
        {}
      containers:
        - name: weather-ui
          securityContext:
            {}
          image: "proudevops/ui-weather:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            null
          resources:
            {}
---
# Source: weather/templates/weather.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alpha-weather
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alpha-weather
  template:
    metadata:
      labels:
        app: alpha-weather
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z db 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']
      containers:
        - name: alpha-weather
          image: proudevops/weather:1.0.1 # leonardtia/weather:latest
          imagePullPolicy: Always  # Set the image pull policy to Always
          env:
            - name: APIKEY
              valueFrom:
                secretKeyRef:
                  name: app-secrets     
                  key: APIKEY
          ports:
            - containerPort: 5000
---
# Source: weather/templates/db.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: alpha-db-statefulset
spec:
  selector:
    matchLabels:
      app: alpha-db
  serviceName: alpha-db-service
  replicas: 1
  template:
    metadata:
      labels:
        app: alpha-db
    spec:
      containers:
        - name: alpha-db
          image: mysql:8.0.31  # devopseasylearning2021/s4-db:4649
          imagePullPolicy: Always
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: MYSQL_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: MYSQL_USER
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/mysql
            - name: dbcreation-script
              mountPath: /docker-entrypoint-initdb.d #https://hub.docker.com/_/mysql Refer Initializing a fresh instance 
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: alpha-db-pvc
        - name: dbcreation-script
          configMap:
            name: app-configmap
---
# Source: weather/templates/sealedsecrets.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: "true"
  creationTimestamp: null
  name: app-secrets
spec:
  encryptedData:
    APIKEY: AgC2o91Tvx+VMcz5lGIopNr4qSWt3vl/oiWq5mSGgJJNbObavNd5tPqfNn+GGhxOdThGvCkWqt0dzD0m8YJxxL6bTt2Fv9QJmcgRiQJZYXMlWfPrBSwjvShiO0inXEp9LWMtNYguWHLjbeduPIqy7VWOmhIpVPpUiDoNz3AXndfOQSK5kPNL5eXfo0fwkOVMHbUFjagf1/nRP0Xaz58dSN05II3vs/Ch0J/Gf1brGvr7nhTWVxpihgaDlVqYj+lnxgYc3K+PQYP/ErbUtMM7/fFGaNsFmcklKfGMrdyfKll/b7i6VPHlGtUSvY6VsDHR1J0ATpBAI04piA91JxDBmj+ARZpLhJcQT+xoL3ElLlZTpl8yvpAupLZtB2V03J/F00n/ht/NQRm4Ao/sYL9+MOS77ld3IJ8WvqMPoX9ApVtg86+V2kYAeBbLV22I/6lbNcx36Ccg0BrfoST5+oWp7DXEkkYGA0UXMFaCAFnwmWDJdkBAL541onYSPHZMkiHHHpG/KgBrPq+1E5ofJ1Ki22sXeLeZQf70niLHRDnQS5dvnv+Y6Gnn63brJ3iiT+59Yiccalzdd6LM5n49AUI/Zm4JyHchmNULX5hjcO5+VMgyiWOfMUownAYwXB45bGSxDL1NmpC98HgS4SE6fAfe6hxPuTjK7Z19P5qD3bqQhbR8R2kCQe4JcYi25ws/S6pVwQxLvQ+xwYW5QxuOfSvC8PkJ2mSlnYEEFIEmvGRzbZCIgmQ6d8cr/QyV3k1b4zcKYZTrrg==
    DB_PASSWORD: AgBQ+rqfN69YZOOI3LXoNk7ntLsVkzUiLyu6s1vhe7IfUGNBoU+AfqMBPDag5ByCJ3QlaYsFSx4ROdVHEFmUpR8UZuTdYlS78ilarz6myLbg2zIbiO9zDe/TwCW00fgh4pY9fxRTSc2scF+Hab9pY6TLeJOZPO5IeAgMBfswphrsFCkvA4bSHPFGhnlfskNHnVP8lfSte4GsrxOEaYtdWnR81d6nfUGnrJ/PqOqWw4aR5Lr46+pY4qWFOHnySla2dnLXDpuPD4hTzis7+mbtJ2lTJXg4sshJXFi3Tdk1Gt3ZrJr30gMSgaTD2sg18DXp7csmywFtRssb/X1yfNRjsLgPGXI22dJZufadi2BxY+VFAYWVli+Za40Tw5sADQlOhRsuyYA1Td3qt1CEuRwvevzARFqcRR9p6UhkKki57aY+dyxsrJKT/IZJyXaFWkTBNukDCjlp/UDoId8Eu+BzDIJGK8LIcC2VKOylCBUTXN3eXhtwIehO1a53WlTu2uuWZYZOwbKznrYFrRm/YzOqiNbtO26JZfde5Mez+InzREFn5+HNCQIQOx1pp9hViKmTx9SWzzDIdF9SBiZBvdu4gjQkKCw0oKZjymC41CpSIIu9mf7JSpRiPMe7sXqKVDeIv6PCKet29AKEsGvwQChe7OpWen7yD+G3Fwr+SxU7bjsAXqNw++caDvNwevvSf1M5a70G650VZRVrwBhZ7c8=
    MYSQL_PASSWORD: AgDVvKut0pTEXkpQDeeEGb72L4rZkjlZYm0nQd2rP+uw26gmHEqEx5zbz3BeTZ9jPKLgRBUCZa7385WuGK7vn/AzdA182oFtFn22z/XurpCpSHJKYp5Sn2hPDIfQ+SUvQab+IG1Q+8Y5CO7a3DHQEQQy8qwpYuRvWz8YSp6TIgxiVkKFdmqIu4KN0orZBYPZOe2GmtfMz5ajucZNI2P/etDQd9KsPmNjSwQ7q0Pe09h+JsNqnMVeLMiaVrrMa6GRTfpODecusrDe6CldtfCtuCn2qNXt5t5+xLG2cBybvWW8mON27lhox8ofv6YMImSVlaEubGI+Yx+7dwzn45TyTvNlgC3bW3FOIVWcrBjpKmzh77ouzWqyUM4fddKv8TRy4bQ3YW7b4a3rH/J18/YTagSIWfGe00sU+sq97YK8sq7LsxcwBBTA0I5ajFS9F7fYz/uMqUfT0KluIXIvVtCfQhEKmrxKATb24uOv5caO7xR4OojAz43PTZl0XTdUst9rapX84QY4QBNpbzBR6/ZWQympWwZBfHe14aIjKbUwvF5ffKsxwDzOhCGn55a4pV7nWvJse1MH9t/IvyoktTJ04XRFywwp53+a91HXgDSLvrE6jMUU7KN6lbVwl1mSLmLKh+6IueawfP5DOVj8EPM6phbJ30gdnGFiqyYGhV/NrjGF2Y/OOY/Yj3DxEsBbNj9pBEba7wkmzN4EICCK26T3ReEeMTWeQt3QYA==
    MYSQL_ROOT_PASSWORD: AgAy4xWtWEN28wC3qsinVfczUniAamEcANOB/oNdgzlgAbij/kGv89ZGNnIS5yJqFy34ALkEJTkX7fnvTDN+UFGLIGvU9LDUSvVB/1OxvG6YGcDOPjZgOrKuwDCDnxgF8jmyCg6eOAHWB3ctj1K1hrN8b8PpAAnVdCNVzLBIxNnL4OejxXFbwA92EXAoG8ZAU7NvHX2I2iUVo8Q/5KckZaKynCDo+CNVO26CtnOK7+IF43i919z7nR6jQZy/P9gDFn4SLHtahPUKPJ1QN1CD+oKZjUXZy36bGmstYaFS1dD4eIygMu3enRHuldubEFEECq3DLvtohr2J+A8/PJKPkwKiMKavUY6aUzcWbmbAYsRSmWOOHWwRSwrhtIYM0BXHCxwPE2FJRp+0TdQWnZX03Q7WOVaIWMJ/ZNmBJq3D4W39HSyk64qkSQVc0gJ8bkbVmmwiYCOiqin7d9MXk7PjecpXB30if0G/PQkJPRlAOcC0rmjfGuDX5eUljO+kWBogKjo9OQL+Gz6nQauF+7xu1lGQSKkRGy8vAKojGXwdP1fxry2C5ctIG16WHwtqZ8BS2ErmWxI7IONltTdnhvZnxQUkcKi3XeghPVAeWxpX+FXagQEA3y4Hq+auBzgYSogufGM2GZoLjF6uy+q2GS1GXx8QergqdI8fxZdMkAIXepTj42zbKfquLlQCHTJuQ0I/S0yRDmwtsEEDX4Y1+kA=
    REDIS_PASSWORD: AgA9+U6/I0xOe63bV9Nz1BQuPJ8XShp9jRHg6eea9vB1bUNv1FlfEeuO5cyOCeIaQHKT1JJ7G9INTPxVQRRnRft2TaGWfJFk2SjYCHVS8kADSNPPFDAU41TitakhWw9n1pSyQuzv7VaeQri6jpKWhCnqSgWo07g5U5FTTXP/ooLJ2Fx3elI9nm+g9Xt6NfitZLC6Hej2/xn48i34ZiCJlyypw8TMljOmochKvM/62e921Rw7Cka8Glq30YkFHiav7+rWiyh9F5AypOV/RBMAdL35CzRfjCiJLiO7OU9B1FzoCMhA5j1FEFcBq/hL1PYV8GQkXnK+BfrbWS/ywzFmuDewPXAfzrAwslWf4C6AGImpjDkMyEj53/LfIQEct5rhdPwY0mq3E/0GWZm0p4++rJWIwJJPfG4FE4J+UQZ891YnHqiIIv5X9XUytiR5Gwl1aWMDjqvWESLPPnEqIM5aFfh++ThllpsHVsw5AI5fF1VzeP9p/D8FiV+uXo4lqjfYN/mtjn84yeIm/fdPrfHCRYyW4tKZ5wyTEKQYcN8BQWHnPWWGS+/Jtr31kZzX06CtXSbSScZzVKHxXB0kUMb5l/RR+6v5/vgMOAwqrnCBMeQs7/ZtY5z44ywVN1Td8et8ZwMm6hf48l+ICoG1uHkSiBCRkB6ErhHPwlNQlJnfVdRnYFTnQ0Hhyl8MUkIbpz7xLJpBuciNuQ==
  template:
    metadata:
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: "true"
      creationTimestamp: null
      name: app-secrets
    type: Opaque
---
apiVersion: v1
data:
  APIKEY: NDJlMjkyODE2N21zaGQyMGU1ZmE2MDc0MzIzZnAxNzRmNzNqc240MWI2MTYxZWExNWQ=
  DB_PASSWORD: bXktc2VjcmV0LXB3
  MYSQL_PASSWORD: R3pXTlFZOGVINFlCa3Q4SHV0WmpAKko=
  MYSQL_ROOT_PASSWORD: bXktc2VjcmV0LXB3
  REDIS_PASSWORD: cmVkaXM=
kind: Secret
metadata:
  name: app-secrets
  namespace: test
  ownerReferences:
  - apiVersion: bitnami.com/v1alpha1
    controller: true
    kind: SealedSecret
    name: app-secrets
type: Opaque
